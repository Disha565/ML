# -*- coding: utf-8 -*-
"""2023202002_A4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QsbRuiXX3KVYoEhyDYdWURAbl_4lFpoS
"""

import numpy as np
import pandas as pd
from os.path import join
from PIL import Image
import torch
import torch.nn as nn
from torchvision.transforms import Compose, Resize, ToTensor, Normalize
import torch.optim as optim
from efficientnet_pytorch import EfficientNet
from torch.utils.data import Dataset, DataLoader
from tqdm import tqdm

# Dataset class
class AgeDataset(Dataset):
    def __init__(self, data_path, annot_path, train=True):
        self.data_path = data_path
        self.annot_path = annot_path
        self.train = train
        self.ann = pd.read_csv(annot_path)
        self.files = self.ann['file_id']
        if train:
            self.ages = self.ann['age']
        self.transform = self._transform(224)

    @staticmethod
    def _convert_image_to_rgb(image):
        return image.convert("RGB")

    def _transform(self, n_px):
        mean = [0.485, 0.456, 0.406]
        std = [0.229, 0.224, 0.225]
        return Compose([
            Resize(n_px),
            self._convert_image_to_rgb,
            ToTensor(),
            Normalize(mean, std),
        ])

    def read_img(self, file_name):
        im_path = join(self.data_path, file_name)
        img = Image.open(im_path)
        img = self.transform(img)
        return img

    def __getitem__(self, index):
        file_name = self.files[index]
        img = self.read_img(file_name)
        if self.train:
            age = self.ages[index]
            return img, age
        else:
            return img

    def __len__(self):
        return len(self.files)

# Initialize the dataset and data loaders
train_path = '/kaggle/input/smai-24-age-prediction/content/faces_dataset/train'
train_ann = '/kaggle/input/smai-24-age-prediction/content/faces_dataset/train.csv'
train_dataset = AgeDataset(train_path, train_ann, train=True)

test_path = '/kaggle/input/smai-24-age-prediction/content/faces_dataset/test'
test_ann = '/kaggle/input/smai-24-age-prediction/content/faces_dataset/submission.csv'
test_dataset = AgeDataset(test_path, test_ann, train=False)

train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

# Define the EfficientNet model
model = EfficientNet.from_pretrained('efficientnet-b0', num_classes=1)  # Assuming regression for age prediction

# Define device
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = model.to(device)

# Define loss function, optimizer, and learning rate scheduler
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.5)

# Training loop
def train(train_loader, model, criterion, optimizer, device):
    model.train()
    running_loss = 0.0

    for images, targets in tqdm(train_loader):
        images, targets = images.to(device), targets.float().to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs.squeeze(), targets)
        loss.backward()
        optimizer.step()

        running_loss += loss.item() * images.size(0)

    epoch_loss = running_loss / len(train_loader.dataset)
    return epoch_loss

# Prediction function
def predict(test_loader, model, device):
    model.eval()
    predictions = []

    for images in tqdm(test_loader):
        images = images.to(device)
        with torch.no_grad():
            pred = model(images)
        predictions.extend(pred.flatten().cpu().numpy())

    return predictions

# Training loop
num_epochs = 20
for epoch in range(num_epochs):
    train_loss = train(train_loader, model, criterion, optimizer, device)
    print(f"Epoch [{epoch + 1}/{num_epochs}], Train Loss: {train_loss:.4f}")
    scheduler.step()

# Predictions
predictions = predict(test_loader, model, device)

# Save predictions to submission CSV
submission = pd.read_csv(test_ann)
submission['age'] = predictions
submission.to_csv('baseline.csv', index=False)

